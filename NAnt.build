<?xml version="1.0" encoding="iso-8859-1"?>

<project name="NAnt" default="build" basedir=".">
    <tstamp/>
    <property name="debug" value="true"/>
    <property name="project.name" value="nant"/>
    <property name="project.FormalName" value="NAnt"/>

    <property name="src.dir" value="src"/>
    <property name="build.dir" value="build"/>
    <property name="dist.dir" value="${project.name}"/>

    <!-- Use script task to get this from AssemblyInfo.cs using a regular expression -->
    <property name="project.version" value="x.x.x"/>

    <script language="C#" mainclass="VersionReader">
        <code><![CDATA[
		using System.IO;

		class VersionReader {
			public static void ScriptMain(Project project) {
			    string sourcePath = Path.Combine(project.BaseDirectory, Path.Combine(project.Properties["src.dir"], project.Properties["project.FormalName"]));
				string assemblyInfoFileName = Path.Combine(sourcePath, "AssemblyInfo.cs");
				StreamReader reader = File.OpenText(assemblyInfoFileName);

				Regex commentRE = new Regex("^(\\s)*//");
				Regex versionRE = new Regex("(?<=AssemblyVersion(\\s)*\\(\")\\d+\\.\\d+\\.\\d+");

				string line = reader.ReadLine();
				while (line != null) {
					// make sure the line has not been commented out
					if (!commentRE.Match(line).Success) {
						// find version string
						Match versionMatch = versionRE.Match(line);
						if (versionMatch.Success) {
							project.Properties["project.version"] = versionMatch.Value;
							break;
						}
					}
					line = reader.ReadLine();
				}
				// must remember to close the file or the compile may not work
				reader.Close();
			}
		}
		]]></code>
    </script>
	
    <property name="dist.name" value="${project.name}-src-${project.version}.zip"/>
    <property name="backup.name" value="..\${project.name}-backup-${nant.dstamp}-${nant.tstamp}.zip" />

    <echo message="Building ${project.name}-${project.version}"/>

	<target name="debug">
		<property name="debug" value="true"/>
	</target>

	<target name="release">
		<property name="debug" value="false"/>
	</target>

    <target name="clean">
        <delete dir="${build.dir}" verbose="true" failonerror="false"/>
        <delete dir="${dist.dir}" verbose="true" failonerror="false"/>
        <delete verbose="true" >
            <fileset basedir="examples">
                <includes name="UserTask/UserTask.dll"/>
                <includes name="HelloWorld/*.exe"/>
            </fileset>
        </delete>
        <delete file="${dist.name}" verbose="true" failonerror="false"/>
        <delete file="doc\NAnt.chm" verbose="true" failonerror="false"/>
    </target>

    <target name="build">
        <mkdir dir="${build.dir}"/>
		<!-- copy the assemblies required to build NAnt to the build folder -->
        <copy todir="${build.dir}">
            <fileset basedir="bin">
                <includes name="DocNet*.*"/>
               <includes name="NUnitCore.dll"/>
            </fileset>
        </copy>

		<!-- compile NAnt.exe -->
        <csc target="exe" output="${build.dir}\${project.FormalName}.exe" debug="${debug}" doc="${build.dir}\${project.FormalName}.xml">
            <sources basedir="${src.dir}\${project.FormalName}">
                <includes name="**/*.cs"/>
            </sources>
            <references>
                <includes name="${build.dir}/DocNet.dll"/>
                <includes name="${build.dir}/DocNet.Msdn.dll"/>
                <includes name="${build.dir}/NUnitCore.dll"/>
            </references>
            <arg value="/nowarn:1591"/>
            <arg value="/reference:Microsoft.JScript.dll"/>
        </csc>

		<!-- compile NAnt.Tests.dll -->
		<csc target="library" output="${build.dir}\${project.FormalName}.Tests.dll" debug="${debug}">
			<sources basedir="${src.dir}\${project.FormalName}.Tests">
				<includes name="*.cs"/>
			</sources>
			<references>
				<includes name="${build.dir}/NUnitCore.dll"/>
				<includes name="${build.dir}/${project.name}.exe"/>
			</references>
		</csc>

		<!-- 
			Perform unit tests.  If a unit test fails, the build fails.
			The base directory is set to the Test directory so that tests can easily
			load external data files wihtout having to worry about complicated paths.
		-->
		<nunit basedir="${src.dir}\${project.FormalName}.Tests" printsummary="true" haltonerror="true" haltonfailure="true">          
            <test class="SourceForge.NAnt.Tests.AllTests" assembly="${build.dir}\${project.FormalName}.Tests.dll" />
		</nunit>
    </target>

    <target name="examples" depends="build">
        <exec program="${build.dir}\nant.exe" basedir="examples"/>
    </target>

    <target name="test">
        <echo message="This task currently does nothing."/>
    </target>

    <target name="doc" depends="build">
        <docnet outputDir="${build.dir}\docs" helpName="NAnt" showMissing="true" showPrivate="false">
            <assemblies basedir="${build.dir}">
                <includes name="NAnt.exe"/>
            </assemblies>
        </docnet>
        <copy file="${build.dir}/docs/NAnt.chm" todir="${build.dir}"/>
    </target>

    <target name="backup" depends="clean">
        <exec program="bin/zip.exe" commandline="-r -q ${backup.name} *"/>
    </target>

    <target name="dist" depends="clean">
        <!-- build a clean release distribution for release -->
        <property name="debug" value="false"/>
        <echo message="Debug = ${debug}"/>
        <call target="build"/>
        <copy file="${build.dir}\NAnt.exe" todir="${dist.dir}\bin"/>
        <copy file="${build.dir}\NAnt.xml" todir="${dist.dir}\bin"/>

        <!-- build developer documentation -->
        <call target="doc"/>
        <copy file="${build.dir}\NAnt.chm" todir="${dist.dir}\doc"/>

        <copy todir="${dist.dir}">
            <fileset>
                <includes name="bin/**"/>
                <includes name="doc/**"/>
                <includes name="src/**"/>
                <includes name="examples/**"/>
                <includes name="NAnt.build"/>
                <includes name="NAnt.key"/>
                <includes name="README.txt"/>
                <includes name="COPYING.txt"/>
            </fileset>
        </copy>

        <delete file="${dist.name}" failonerror="false"/>
        <exec program="bin/zip.exe" commandline="-r -q ${dist.name} ${dist.dir}/*"/>
    </target>
</project>
